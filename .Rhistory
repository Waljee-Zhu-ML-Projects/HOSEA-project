library(haven)
?read_sas
library(xgboost)
?xgb.train
xgb_prep_sub <- function(train,test,valid,dname,subset){
# xgb formatting for each set
dtrain <- xgb.DMatrix(as.matrix(train[[dname]][subset]),
label=train[[dname]]$CaseControl)
dvalid <- xgb.DMatrix(as.matrix(valid[[dname]][subset]),
label=valid[[dname]]$CaseControl)
dtest <- xgb.DMatrix(as.matrix(test[[dname]][subset]),
label=test[[dname]]$CaseControl)
# combine as a watchlist
dwatchlist <- list(train=dtrain,test=dtest,valid=dvalid)
# return
return(dwatchlist)
}
11 + 16 + 10 + 202
9000/4
# demographic variables
for(varname in demo_vars){
test_init[[varname]] <-
test_samp[[varname]] <-
fill_by_sample(train_x[[varname]], train_init[[varname]])
#print(paste0('Impute ',varname))
}
install.packages("mice")
library(mice)
train_x = starwars
# (some of these are no longer used in the code)
library(haven)
library(dplyr)
library(purrr)
library(pROC)
library(nnet)
library(biglm)
library(randomForest)
library(gbm)
library(xgboost)
library(pdp)
train_x = starwars
mice::mice(train_x)
train_x
train_x %>%
mutate_if(sapply(train_x, is.character), as.factor)
train_x = train_x %>%
mutate_if(sapply(train_x, is.character), as.factor)
train_x
mice::mice(train_x)
mice::mice(as.data.frame(train_x))
as.data.frame(train_x)
nhanes = as.tibble(nhanes)
nhanes
nhanes2 = as.tibble(nhanes2)
nhanes2
tibble(nhanes)
nhanes$hyp = as.factor(nhanes$hyp)
nhanes
nhanes$age = as.factor(nhanes$age)
nhanes
nhanes = tibble(nhanes)
nhanes
train_x = nhanes
mice::mice(train_x, method=NULL, m=1, maxit=5,
visitSequence="monotone")
imputed = mice::mice(train_x, method=NULL, m=1, maxit=5,
visitSequence="monotone")
imputed
complete(imputed)
complete(imputed)
complete(imputed)
complete(imputed)
complete(imputed)
imputed = mice::mice(train_x, method=NULL, m=3, maxit=5,
visitSequence="monotone")
complete(imputed)
complete(imputed)
complete(imputed)
attributes(imputed)
mice_result = mice::mice(train_x, method=NULL, m=1, maxit=5,
visitSequence="monotone")
completed(mice_result)
complete(mice_result)
train_imputed_x = complete(mice_result)
attributes(mice_result)
attr(mice_result, "imp")
attr(mice_result, "nmis")
attr(mice_result, "formulas")
attr(mice_result, "post")
train_imputed_x = complete(mice_result)
test_x = nhanes
merged_x = rbind(train_x, test_x)
mice_result = mice::mice(merged_x, method=NULL, m=1, maxit=5,
visitSequence="monotone")
merged_imputed_x = complete(mice_result)
merged_imputed_x
train_n = nrow(train_x)
test_n = nrow(test_x)
ignore = rep(F, train_n + test_n)
merged_x = rbind(train_x, test_x)
train_n = nrow(train_x)
test_n = nrow(test_x)
ignore = rep(F, train_n + test_n)
ignore
ignore[1:train_n] = F
ignore
mice_result = mice::mice(merged_x, method=NULL, m=1, maxit=5,
visitSequence="monotone", ignore=ignore)
merged_imputed_x = complete(mice_result)
merged_imputed_x
# call mice
# ignore tells mice to only fit the model on the training set
# but still outputs imputation for the testing set
mice_result = mice::mice(merged_x, method=NULL, m=1, maxit=10,
visitSequence="monotone", ignore=ignore)
merged_imputed_x = complete(mice_result)
merged_imputed_x
merged_imputed_x
nhanes = tibble(nhanes)
train_x = nhanes
test_x = nhanes
# merged to pass to mice
merged_x = rbind(train_x, test_x)
merged_x
train_n = nrow(train_x)
test_n = nrow(test_x)
ignore = rep(T, train_n + test_n)
ignore[1:train_n] = F
# call mice
# ignore tells mice to only fit the model on the training set
# but still outputs imputation for the testing set
mice_result = mice::mice(merged_x, method=NULL, m=1, maxit=10,
visitSequence="monotone", ignore=ignore)
merged_imputed_x = complete(mice_result)
test_imputed_x = merged_imputed_x[-(1:train_n)]
test_imputed_x
merged_imputed_x
merged_imputed_x[-(1:train_n)]
merged_imputed_x[-(1:train_n), ]
test_imputed_x = tibble(merged_imputed_x[-(1:train_n), ])
test_imputed_x
# merged to pass to mice
merged_x = bind_rows(train_x, test_x)
merged_x
# merged to pass to mice
merged_x = bind_rows(train_x, test_x)
train_n = nrow(train_x)
test_n = nrow(test_x)
ignore = rep(T, train_n + test_n)
ignore[1:train_n] = F
# call mice
# ignore tells mice to only fit the model on the training set
# but still outputs imputation for the testing set
mice_result = mice::mice(merged_x, method=NULL, m=1, maxit=10,
visitSequence="monotone", ignore=ignore)
merged_imputed_x = mice::complete(mice_result)
merged_imputed_x
# get testing set
df = merged_imputed_x[-(1:train_n), ]
# store
test_impfinal = tibble(df)
test_impfinal
smoke_vars <- c('smoke_current','smoke_former')
# colonoscopy vars
other_vars <- c('colonoscopy_n','colonoscopy_maxdiff',
'labs_fobt_n','labs_fobt_maxdiff',
'h2r_int','h2r_mean','h2r_max','h2r_maxdiff','h2r_tv',
'ppi_int','ppi_mean','ppi_max','ppi_maxdiff','ppi_tv')
# variable blocks
# demographic (age,bmi,weight numeric, SmokeStatus multiclass, remaining 2-class)
demo_vars <- c('ageatindex','Gender','bmi','weight',
'Asian','Black','HawaiianPacific','IndianAlaskan',
'agentorange',
'GerdAtIndex',
'CHF','CTD','DEM','DIAB_C','HIV','MLD','MSLD','PARA','RD',
'cd','copd','diab_nc','mi','pud','pvd')
c(demo_vars, other_vars, smoke_vars)
logging = function(train_x, test_x=NULL) {
print(paste("Missing proportion in training set:", mean(is.na(train_x))))
if(!missing(test_x)) print(paste("Missing proportion in training set:", mean(is.na(test_x))))
}
train_x
logging(train_x)
logging(train_x, test_x)
# demographic (age,bmi,weight numeric, SmokeStatus multiclass, remaining 2-class)
demo_vars <- c(
'ageatindex','Gender','bmi','weight',
'Asian','Black','HawaiianPacific','IndianAlaskan',
'agentorange','GerdAtIndex'
)
demo_vars_num <- demo_vars[c(1,3,4)]
demo_vars_ind <- demo_vars[-c(1,3,4)]
charlson_vars = c(
'CHF','CTD','DEM','DIAB_C','HIV','MLD','MSLD','PARA','RD',
'cd','copd','diab_nc','mi','pud','pvd'
)
smoke_vars <- c('smoke_current','smoke_former')
# colonoscopy vars
other_vars <- c('colonoscopy_n','colonoscopy_maxdiff',
'labs_fobt_n','labs_fobt_maxdiff',
'h2r_int','h2r_mean','h2r_max','h2r_maxdiff','h2r_tv',
'ppi_int','ppi_mean','ppi_max','ppi_maxdiff','ppi_tv')
# blood lab measurements (all numeric)
lab_vars <- list(c('A1c'),
c('bun','calc','chlor','co2','creat','gluc','k','na'),
c('baso','eos','hct','hgb','lymph','mch','mchc','mcv','mono','mpv','neut','platelet','rbc','rdw','wbc'),
c('CRP'),
c('alkphos','alt','ast','totprot'),
c('chol','hdl','ldl','trig'))
# blood lab longitudinal summaries
lab_suffix <- c('_mean',
'_max','_min',
'_maxdiff','_mindiff','_tv')
c(demo_vars, "smoke_current", charlson_vars)
2020/666
source("impute_missing.R")
train_x = starwars
train_x = train_x %>%
mutate_if(sapply(train_x, is.character), as.factor)
mice::mice(as.data.frame(train_x))
n_unique = function(x) length(unique(x))
df = df %>% mutate_if(sapply(df, n_unique)<10, as_factor)
nhanes$age = as.factor(nhanes$age)
nhanes$hyp = as.factor(nhanes$hyp)
nhanes = tibble(nhanes)
train_x = nhanes
test_x = nhanes
train_x = starwars
library(haven)
library(dplyr)
library(purrr)
library(pROC)
library(nnet)
library(biglm)
library(randomForest)
library(gbm)
library(xgboost)
library(pdp)
library(mice)
train_x = starwars
train_x = train_x %>%
mutate_if(sapply(train_x, is.character), as.factor)
mice::mice(as.data.frame(train_x))
n_unique = function(x) length(unique(x))
df = df %>% mutate_if(sapply(df, n_unique)<10, as_factor)
nhanes$age = as.factor(nhanes$age)
nhanes$hyp = as.factor(nhanes$hyp)
nhanes = tibble(nhanes)
train_x = nhanes
test_x = nhanes
mice_result = mice::mice(train_x, method=NULL, m=3, maxit=5,
visitSequence="monotone")
train_x
mice_result = mice::mice(train_x, method=NULL, m=3, maxit=5,
visitSequence="monotone")
mice_result
complete(mice_result)
complete(mice_result)
complete(mice_result)
complete(mice_result)
complete(mice_result)
complete(mice_result, 1)
complete(mice_result, 1)
complete(mice_result, 2)
x <- list(a=1,b=2,c=3)
list.prepend(x, d=4, e=5)
install.packages("rlist")
rlist::list.prepend(x, d=4, e=5)
nreps=4
paste0("test", seq(nreps))
best_aucs = rep(0, nreps+3)
names(best_aucs) = c("train", paste0("test", seq(nreps)), "cc", "valid")
best_aucs
A = matrix(1:6, 2, 3)
A
apply(A, 1, mean)
install.packages("pROC")
install.packages("pROC")
c(
'CHF','CTD','DEM','DIAB_C','HIV','MLD','MSLD','PARA','RD',
'cd','copd','diab_nc','mi','pud','pvd'
)
install.packages("xtable")
2849/502849
12/1571
286/83640
369/133193
1122/163373
304/89372
1060/121072
593/165220
843/120373
444/88946
665
665/38938
2537/495273
312/7576
2244/416583
605/86266
2849 / 502849
2044/284455
805 / 218394
2849*2
2849*2*
)
38*6
32*6
33*6
198+16+9+16
